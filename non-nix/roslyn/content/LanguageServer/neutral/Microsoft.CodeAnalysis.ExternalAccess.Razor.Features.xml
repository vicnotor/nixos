<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.ExternalAccess.Razor.Features</name>
    </assembly>
    <members>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorCSharpSyntaxFormattingOptions">
            <summary>
            Wrapper for CSharpSyntaxFormattingOptions for Razor external access.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorCSharpSyntaxFormattingOptions.#ctor(Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorSpacePlacement,Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorBinaryOperatorSpacingOptions,Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorNewLinePlacement,Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorLabelPositionOptions,Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorIndentationPlacement,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorNamespaceDeclarationPreference,System.Boolean,System.Int32)">
            <summary>
            Wrapper for CSharpSyntaxFormattingOptions for Razor external access.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorRequestContext.Workspace">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Workspace"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorRequestContext.Solution">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Solution"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorRequestContext.TextDocument">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Document"/>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.RazorTextDocumentIdentifier">
            <summary>
            Custom type containing information in a <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContext"/> to avoid coupling LSP protocol versions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.RazorTextDocumentIdentifier.#ctor(System.Uri,System.String)">
            <summary>
            Custom type containing information in a <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContext"/> to avoid coupling LSP protocol versions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.AbstractRazorLspService">
            <summary>
            Base class for services that need to live in Razor but cannot be exported using <see cref="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.ExportCohostStatelessLspServiceAttribute"/>
            since those services must implement <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspService"/> but the Razor code doesn't have IVT to it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.Handlers.CompletionListCacheWrapper">
            <summary>
            Provides a wrapper around the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Completion.CompletionListCache"/> so that Razor can control the lifecycle.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.Handlers.InlayHintCacheWrapper">
            <summary>
            Provides a wrapper around the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintCache"/> so that Razor can control the lifecycle.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.IRazorSemanticTokensRefreshQueue.Initialize(System.String)">
            <summary>
            Initialize the semantic tokens refresh queue in Roslyn
            </summary>
            <remarks>
            This MUST be called synchronously from an IOnInitialized handler, to avoid dual initialization when
            Roslyn and Razor both support semantic tokens
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.RazorCohostRequestContext.Workspace">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Workspace"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.RazorCohostRequestContext.Solution">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Solution"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.Cohost.RazorCohostRequestContext.TextDocument">
            <inheritdoc cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Document"/>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDocumentOperationService.CanApplyChange">
            <summary>
            document version of <see cref="M:Microsoft.CodeAnalysis.Workspace.CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind)"/>
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDocumentOperationService.SupportDiagnostics">
            <summary>
            indicates whether this document supports diagnostics or not
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDocumentPropertiesService.DesignTimeOnly">
            <summary>
            True if the source code contained in the document is only used in design-time (e.g. for completion),
            but is not passed to the compiler when the containing project is built.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDocumentPropertiesService.DiagnosticsLspClientName">
            <summary>
            The LSP client name that should get the diagnostics produced by this document; any other source
            will not show these diagnostics.  For example, razor uses this to exclude diagnostics from the error list
            so that they can handle the final display.
            If null, the diagnostics do not have this special handling.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDocumentServiceProvider.GetService``1">
            <summary>
            Gets a document specific service provided by the host identified by the service type. 
            If the host does not provide the service, this method returns null.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDynamicFileInfoProvider.Updated">
            <summary>
            indicate content of a file has updated. the event argument "string" should be same as "filepath" given to <see cref="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDynamicFileInfoProvider.GetDynamicFileInfoAsync(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDynamicFileInfoProvider.GetDynamicFileInfoAsync(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            return <see cref="T:Microsoft.CodeAnalysis.Host.DynamicFileInfo"/> for the context given
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDynamicFileInfoProvider.RemoveDynamicFileInfoAsync(Microsoft.CodeAnalysis.ProjectId,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            let provider know certain file has been removed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorAnalyzerAssemblyResolver.ResolveCore(System.Runtime.Loader.AssemblyLoadContext,System.Reflection.AssemblyName,System.String)">
            <summary>
            This will resolve the razor generator assembly specified by <paramref name="assemblyName"/> in the specified 
            <paramref name="compilerLoadContext"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorCSharpFormattingInteractionService">
            <summary>
            Enables Razor to utilize Roslyn's C# formatting service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorCSharpFormattingInteractionService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,System.Char,System.Int32,Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorIndentationOptions,Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorAutoFormattingOptions,Microsoft.CodeAnalysis.Formatting.FormattingOptions.IndentStyle,Microsoft.CodeAnalysis.ExternalAccess.Razor.Features.RazorCSharpSyntaxFormattingOptions,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a 
            character.  The position provided is the position of the caret in the document after
            the character been inserted into the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDocumentPropertiesServiceWrapper.DiagnosticsLspClientName">
            <summary>
            The LSP client name that should get the diagnostics produced by this document; any other source
            will not show these diagnostics.  For example, razor uses this to exclude diagnostics from the error list
            so that they can handle the final display.
            If null, the diagnostics do not have this special handling.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo">
            <summary>
            provides info on the given file
            
            this will be used to provide dynamic content such as generated content from cshtml to workspace
            we acquire this from <see cref="T:Microsoft.CodeAnalysis.Host.IDynamicFileInfoProvider"/> exposed from external components such as razor for cshtml
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.FilePath">
            <summary>
            for now, return null. in future, we will use this to get right options from editorconfig
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.SourceCodeKind">
            <summary>
            return <see cref="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.SourceCodeKind"/> for this file
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.TextLoader">
            <summary>
            return <see cref="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.TextLoader"/> to load content for the dynamic file
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.DocumentServiceProvider">
            <summary>
            return <see cref="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorDocumentServiceProvider"/> for the contents it provides
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorDynamicFileInfo.ToUpdatedDocumentInfo(Microsoft.CodeAnalysis.DocumentInfo)">
            <summary>
            Constructs a new <see cref="T:Microsoft.CodeAnalysis.DocumentInfo"/> from an existing <see cref="T:Microsoft.CodeAnalysis.DocumentInfo"/> but with updated
            text loader and document service provider coming from this instance.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorGeneratedDocumentIdentity">
            <summary>
            Wrapper for <see cref="T:Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity" /> and <see cref="T:Microsoft.CodeAnalysis.SourceGeneratorIdentity" />
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorGeneratedDocumentIdentity.#ctor(Microsoft.CodeAnalysis.DocumentId,System.String,System.String,System.String,System.String,System.Version,System.String)">
            <summary>
            Wrapper for <see cref="T:Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity" /> and <see cref="T:Microsoft.CodeAnalysis.SourceGeneratorIdentity" />
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorGlobalOptions.GetGlobalOptions(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            For testing purposes only. Razor does not use MEF composition for host services so we need to return a mock.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.JsonSerializableDocumentId">
            <summary>
            Represents a DocumentId that can be used by Razor for OOP services that communicate via System.Text.Json
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.JsonSerializableDocumentId.#ctor(System.Guid,System.Guid)">
            <summary>
            Represents a DocumentId that can be used by Razor for OOP services that communicate via System.Text.Json
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.JsonSerializableRazorPinnedSolutionInfoWrapper">
            <summary>
            A wrapper for a solution that can be used by Razor for OOP services that communicate via System.Text.Json
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.JsonSerializableRazorPinnedSolutionInfoWrapper.#ctor(System.Int64,System.Int64,Microsoft.CodeAnalysis.Solution)">
            <summary>
            A wrapper for a solution that can be used by Razor for OOP services that communicate via System.Text.Json
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorPinnedSolutionInfoWrapper">
            <summary>
            A wrapper for a solution that can be used by Razor for OOP services that communicate via MessagePack, or in proc services that don't communicate.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorServiceDescriptorsWrapper.#ctor(System.String,System.Func{System.String,System.String},System.Collections.Immutable.ImmutableArray{MessagePack.Formatters.IMessagePackFormatter},System.Collections.Immutable.ImmutableArray{MessagePack.IFormatterResolver},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Type}})">
            <summary>
            Creates a service descriptor set for services using MessagePack serialization.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorServiceDescriptorsWrapper.#ctor(System.String,System.Func{System.String,System.String},System.Collections.Immutable.ImmutableArray{System.Text.Json.Serialization.JsonConverter},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Type}})">
            <summary>
            Creates a service descriptor set for services using System.Text.Json serialization.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.RazorServiceDescriptorsWrapper.GetDescriptorForServiceFactory(System.Type)">
            <summary>
            To be called from a service factory in OOP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.AbstractRazorLanguageServerFactoryWrapper">
            <summary>
            NOTE: For Razor test usage only
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExternalAccess.Razor.AbstractRazorLanguageServerFactoryWrapper.AddJsonConverters(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Supports the creation of a Roslyn LSP server for functional tests
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExternalAccess.Razor.IRazorTestCapabilitiesProvider">
            <summary>
            A capabilities provider that should only be used from Razor tests
            </summary>
        </member>
    </members>
</doc>
